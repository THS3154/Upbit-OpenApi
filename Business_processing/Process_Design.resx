<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>